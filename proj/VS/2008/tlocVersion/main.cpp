#include <iostream>
#include <fstream>
#include <string>
#include <time.h>
#include <vector>

using namespace std;

#define PROJECT_NAME "TLOC"
#define VERSION_FILE_NAME "../../../../src/tlocVersion.h"

#define RETURN_SUCCESS return 0
#define RETURN_ERROR return -1

#define MAJOR_VERSION_M "_MAJOR_VERSION"
#define MINOR_VERSION_M "_MINOR_VERSION"
#define BUILD_NUMBER_M  "_BUILD_NUMBER"
#define DATE_TIME_M     "_DATE_TIME"
#define STRING_M        "_STR"

enum
{
  major_version = 0,
  minor_version,
  build_number,
  date_time,
  total_elements
};

const char* macroNames[] =
{
  "_MAJOR_VERSION",
  "_MINOR_VERSION",
  "_BUILD_NUMBER",
  "_DATE_TIME",
};

int ReadVersionH(vector<time_t>& a_version);
int WriteVersionH(vector<time_t>& a_version);

int main(int argc, char* argv[])
{
  //------------------------------------------------------------------------
  // Initialize

  vector<time_t> version;
  for (int i = 0; i < (int)total_elements; ++i)
  {
    version.push_back(0);
  }

  //------------------------------------------------------------------------
  // Check if first time

  ifstream inFile;
  inFile.open(VERSION_FILE_NAME);

  // First time file status
  const bool firstTime = inFile.is_open() ? false : true;
  inFile.close();

  int error;
  
  //------------------------------------------------------------------------
  // Read and Parse tlocVerion.h

  if (!firstTime)
  {
    if ((error = ReadVersionH(version)))
    {
      return error;
    }
  }
  
  //------------------------------------------------------------------------
  // Write tlocVersion.h

  if ((error = WriteVersionH(version)))
  {
    return error;
  }

  RETURN_SUCCESS;
}

int ReadVersionH(vector<time_t>& a_version)
{
  ifstream inFile;
  inFile.open(VERSION_FILE_NAME);

  if (!inFile.good())
  {
    cout << "Could not open file for read/write: " << VERSION_FILE_NAME << endl;
    RETURN_ERROR;
  }

  char str[256];

  while (inFile.good())
  {
    inFile.getline(str, 256);

    string currLine = str;

    string strToMatch = "ifndef " PROJECT_NAME "_VERSION_";

    if (currLine.find(strToMatch) != string::npos &&
      currLine.find(strToMatch + "H") == string::npos)
    {
      size_t pos = currLine.find("_VERSION_");
      pos = currLine.find_first_of('_', pos+1); // last _ of _VERSION_

      size_t pos2 = currLine.find_first_of('_', pos + 1);

      for (int z = 0; z < 3; ++z)
      {
        string currentNum = currLine.substr(pos + 1, pos2 - pos - 1);
        if (!currentNum.empty())
        {
          a_version[z] = atoi(currentNum.c_str());
          if (z == build_number)
          {
            a_version[build_number]++;
          }
        }

        pos = pos2;
        pos2 = currLine.find_first_of('_', pos + 1);
      }
    }
  }

  inFile.close();

  RETURN_SUCCESS;
}

int WriteVersionH(vector<time_t>& a_version)
{
  ofstream outFile(VERSION_FILE_NAME);

  if (!outFile.is_open() || !outFile.good())
  {
    RETURN_ERROR;
  }

  // The current time in milliseconds
  a_version[date_time] = time(NULL);

  outFile << "#ifndef " << PROJECT_NAME << "_VERSION_H" << "\n";
  outFile << "#define " << PROJECT_NAME << "_VERSION_H" << "\n\n";
  outFile <<
    "// << IF YOU HAVE A CONFLICT, READ THIS >> \n"
    "// Auto-generated file for automatic versioning. Do not edit this file \n"
    "// directly unless you are editing a CONFLICT, in which case simply \n"
    "// increment the time and your current build number to resolve the \n"
    "// conflict.\n"
    "// e.g. local-file version = x_x_5_12345 where 12345 = time and \n"
    "// incoming-file version = x_x_8_12350 where 12350 = time then... \n"
    "// take the build number (5) and increment it and increment the time (12345)\n"
    "// so the local-file will then have: x_x_6_12346\n"
    "// (please see end-of-file for rationalle behind this)\n\n";

  outFile << "#ifndef " << PROJECT_NAME << "_VERSION_"
    << a_version[major_version] << "_"
    << a_version[minor_version] << "_"
    << a_version[build_number] << "_"
    << a_version[date_time] << "\n";
  outFile <<
    "#  error \"You are building against an incorrect/older version of the "
    "library. The correct version is the macro above.\"\n";
  outFile << "#endif\n\n";

  outFile << "#endif\n\n";

  outFile << "// Rationale behind incrementing the build number and time is that \n";
  outFile << "// it will reduce the chances of a version number conflicting with \n";
  outFile << "// another previous version (or a version we do not know about yet \n";
  outFile << "// as our repository may not be up-to-date)";

  RETURN_SUCCESS;
}